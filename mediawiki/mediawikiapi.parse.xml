<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
  <meta>
    <author>Ryan Lane</author>
    <sampleQuery>select * from {table} where query='search tag(s)'</sampleQuery>
    <description>Open search of Wikipedia Articles</description>
  </meta>
  <bindings>
    <select itemPath="" produces="XML">
      <urls>
        <url>http://{site}/w/api.php?action=parse&amp;format=xml</url>
      </urls>
      <inputs>
        <key id="site" type="xs:string" paramType="path" required="false" default="en.wikipedia.org"/>
        <key id="text" type="xs:string" paramType="query" required="true"/>
        <key id="title" type="xs:string" paramType="query" required="true"/>
      </inputs>
  	  <execute><![CDATA[
		var	results  = <item></item>;
		function list(str) {
			return str.replace(/(?:(?:(?:^|\n)[\*#].*)+)/g, function (m) {
				var type = m.match(/(^|\n)#/) ? 'OL' : 'UL';
				m = m.replace(/(^|\n)[\*#][ ]{0,1}/g, "$1");
				m = list(m);
				return '<' + type + '><li>' + m.replace(/^\n/, '').split(/\n/).join('</li><li>') + '</li></' + type + '>';
			});
		}
		var parsed = list(text
			.replace(/(?:^|\n+)([^# =\*<].+)(?:\n+|$)/gm, function (m, l) {
				if (l.match(/^\^+$/)) return l;
				return "\n<p>" + l + "</p>\n";
			})
			.replace(/(?:^|\n)[ ]{2}(.*)+/g, function (m, l) {
				if (l.match(/^\s+$/)) return m;
				return '<blockquote>' + l + '</pre>';
			})
			.replace(/((?:^|\n)[ ]+.*)+/g, function (m) {
				if (m.match(/^\s+$/)) return m;
				return '<pre>' + m.replace(/(^|\n)[ ]+/g, "$1") + '</pre>';
			})
			.replace(/(?:^|\n)([=]+)(.*)\1/g, function (m, l, t) {
				return '<h' + l.length + '>' + t + '</h' + l.length + '>';
			})
			.replace(/'''(.*?)'''/g, function (m, l) {
				return '<strong>' + l + '</strong>';
			})
			.replace(/''(.*?)''/g, function (m, l) {
				return '<em>' + l + '</em>';
			})
			.replace(/[^\[](http[^\[\s]*)/g, function (m, l) {
				return '<a href="' + l + '">' + l + '</a>';
			})
			.replace(/[\[](http.*)[!\]]/g, function (m, l) {
				var p = l.replace(/[\[\]]/g, '').split(/ /);
				var link = p.shift();
				return '<a href="' + link + '">' + (p.length ? p.join(' ') : link) + '</a>';
			})
			.replace(/\[\[(.*?)\]\]/g, function (m, l) {
				var p = l.split(/\|/);
				var link = p.shift();
				if (link.match(/^Image:(.*)/)) {
					return m;
				} else {
					return '<a href="' + link + '">' + (p.length ? p.join('|') : link) + '</a>';
				}
			})
		);
		results.appendChild( <title>{title}</title> );
		/*results.appendChild( <text>{text}</text> );*/
		results.appendChild( <parsed>{parsed}</parsed> );
		response.object = results;
	  ]]></execute>
    </select>
  </bindings>
</table>